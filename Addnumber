#include <iostream>
#include <string>
#include <fstream>

using namespace std;


class digit
{
public:
	int data;
	digit *next = nullptr;
};

digit * writeNum(ifstream & file);
int digcmp(digit * left, digit *right);
char getOperator(ifstream & file);
void writeNum(digit * num, ofstream & file);
void deleteNum(digit * num);
digit * addNumbers(digit * left, digit * right);
digit * subNumbers(digit * left, digit * right);
void writeRecursive(digit * num, ofstream & file);
void setNeg(digit * num);
void printNum(digit * num);
void printRecursive(digit * num);
void subtractCarry(digit * head, digit * prev);
//digit * clearLeadingZeros(digit * num);

//-----------------PROVIDED BY INSTRUCTOR-----------------

int digcmp(digit * left, digit * right) {
	int result = 0;
	do // the assignment guarantees there will not be zero length numbers
	{
		if (left->data - right->data == 0) {
		} // take no action
		else {
			result = left->data - right->data;
		}
		left = left->next;
		right = right->next;
	} while (left != nullptr && right != nullptr);
	if (left == nullptr && right != nullptr) {
		// right number is longer and therefore larger
		result = -1;
	}
	if (left != nullptr && right == nullptr) {
		// left number is longer and therefore larger
		result = 1;
	}
	return result;
}
/*digit * loadNumber(ifstream & file) {
	char n;
	int num;
	digit *head = nullptr;
	string load;
	digit* newdigit = new digit;
	while (!file.eof()) {
		getline(file, load);
		newdigit->data = num;
		newdigit->next = head;
		head = newdigit;



	}



	
	return head;
}
*/
digit * writeNum(ifstream & file) {
	if (file.eof())
		return nullptr;
	digit * head = new digit;
	digit * dig = head;

	char aChar;
	int num;

	file.get(aChar);
	while (aChar != '\n' && !file.eof()) {
		num = int(aChar - '0');
		head->data = num;
		file.get(aChar);
		if (aChar != '\n') {
			dig = head;
			head = new digit;
			head->next = dig;
		}
	}
	return head;
}
char getOperator(ifstream & file) {
	char aChar;
	string toss;

	file.get(aChar);
	getline(file, toss);

	return aChar;
}
void writeNum(digit * num, ofstream & file) {
	writeRecursive(num, file);
	file << endl;
}

void printRecursive(digit * num) {
	if (num == nullptr)
		return;
	printRecursive(num->next);
	cout << num->data;
}

void printNum(digit * num) {
	printRecursive(num);
	cout << endl;

}
void writeRecursive(digit * num, ofstream & file) {
	if (num == nullptr)
		return;
	file << num->data;
	writeRecursive(num->next, file);
}
void deleteNum(digit * num)
{
	digit * n;
	while (num != nullptr)
	{
		n = num->next;
		delete num;
		num = n;
	}
		//delete num;
		//while loop

			//num->data = num->next->data;
	}
	
digit * addNumbers(digit * left, digit * right) {
	digit *result = new digit;
	int sum;
	digit *curry = result;
	int carry=0;
	while ((right != NULL) && (left !=NULL)) {
		
		sum = right->data + left->data + carry;
		if (sum>9) {
			sum = sum - 10;
			result->data = sum + carry;
			carry = 1;
		}
		else {
			carry = 0;
			result->data = sum +carry;
			
		}
		right = right->next;
		left = left->next;
		result->data = sum;
		
	}

	return result;



}

//-----------------PROVIDED BY INSTRUCTOR-----------------
/*void subtractCarry(digit * head, digit * prev) {
	if (head == nullptr) {
		return;
	} // safety check only, this should never happen!
	if (head->data == 0) {
		head->data = 9;
		subtractCarry(head->next, head);
	}
	else {
		head->data -= 1;
	}
}
*/
// TODO: Implement function to subtract 2 numbers stored in 2 linked lists. Use provided helper functions
digit * subNumbers(digit * left, digit * right) {
	return nullptr;
}

//-----------------PROVIDED BY INSTRUCTOR-----------------
/*digit * clearLeadingZeros(digit * num) {

	digit * next;

	while (num->data == 0) {

		next = num->next;

		delete num;

		num = next;

	}

	return num;

}
*/
//-----------------PROVIDED BY INSTRUCTOR-----------------
int main() {
	digit * left, *right, *result;
	int test;
	char op;
	ofstream outFile("output.txt");
	ifstream inFile("largeNumbers.txt");

	while (!inFile.eof()) {
		left = writeNum(inFile);
		right = writeNum(inFile);
		if (left == nullptr || right == nullptr) {
			// check after two reads if we didn't get numbers
			// in case of one extra newline at end of file
			break;
		}
		op = getOperator(inFile);

		if (op == '+') {
			result = addNumbers(left, right);
		}
		else {
			test = digcmp(left, right);
			if (test > 0) {
				result = subNumbers(left, right); // result will be positive
				//result = clearLeadingZeros(result);
			}
			else if (test < 0) {
				result = subNumbers(right, left); // result will be negative
				//result = clearLeadingZeros(result);
				//setNeg(result);
			}
			else {
				result = new digit; // result of subtraction was zero
			}
		}
		writeNum(result, outFile);
		deleteNum(left);
		deleteNum(right);
		deleteNum(result);
		left = nullptr;
		right = nullptr;
		result = nullptr;
	}

	outFile.close();
	inFile.close();
	return 0;
	system("Pause");
}
